name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.13"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        activate-environment: zulip-refinement-bot
        environment-file: environment.yml
        python-version: ${{ matrix.python-version }}
        auto-activate-base: false

    - name: Install package
      shell: bash -l {0}
      run: |
        pip install -e ".[dev,test]"

    - name: Run pre-commit checks
      shell: bash -l {0}
      run: |
        pre-commit run --all-files

    - name: Test with pytest
      shell: bash -l {0}
      run: |
        pytest tests/ -v --cov=src/zulip_refinement_bot --cov-report=xml --cov-report=html

    - name: Test FastAPI application
      shell: bash -l {0}
      run: |
        # Test FastAPI app imports and basic functionality
        python -c "from src.zulip_refinement_bot.fastapi_app import app; print('✓ FastAPI app imports successfully')"
        python -c "from src.zulip_refinement_bot.webhook_bot import WebhookRefinementBot; print('✓ Webhook bot imports successfully')"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install bandit[toml] safety

    - name: Run bandit security check
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check
